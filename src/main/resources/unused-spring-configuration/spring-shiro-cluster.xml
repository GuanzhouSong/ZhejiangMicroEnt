<?xml version="1.0" encoding="UTF-8"?>
<!--
   Copyright© 2003-2016 浙江汇信科技有限公司, All Rights Reserved.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
    <!--
    使用说明：
    1、spring-shiro-single.xml配置文件中导入
    2、添加项目MAVEN依赖
    -->
    <!-- 添加 动态权限 定义 -->
    <bean id="filterChainDefinitions" class="java.lang.String">
        <constructor-arg>
            <value>
                /syn/system/sysdepart/treeWithAllDept=anon
                /syn/system/sysdepart/tree=anon

                /syn/login=anon
                /syn/logout=logout_syn
                <!--/syn/**=perms=[_SYN_SUPER_PERM]-->
                /syn/**=user

                /reg/server/login=anon
                /reg/server/logout = logout
                <!--/reg/server/** = perms[_REG_SUPER_PERM]-->
                <!--/syn/index=anon-->
                /syn/**=user
                
                /depsyn/main=anon
                /depsyn/**=user
            </value>
        </constructor-arg>
    </bean>


    <!-- 权限定义管理-->
    <bean id="defaultShiroChainService" class="com.icinfo.framework.security.shiro.DefaultShiroChainServiceImpl">
        <property name="filterChainDefinitions" ref="filterChainDefinitions"/>
        <property name="shiroSecurityService" ref="sysLoginService"/>
    </bean>

    <!--重新加载权限定义-->
    <bean id="defaultShiroChainReloadService"
          class="com.icinfo.framework.security.shiro.DefaultShiroChainReloadServiceImpl">
        <property name="shiroChainService" ref="defaultShiroChainService"/>
    </bean>

    <!-- 动态权限 定义 -->
    <bean id="filterChainDefinitionMap" class="com.icinfo.framework.security.shiro.DefaultChainDefinitionFactory">
        <property name="shiroChainService" ref="defaultShiroChainService"/>
    </bean>

    <!-- Shiro Filter warning:beanid 必须和web.xml中filter名字相同 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="loginUrl" value="/admin/login"/>
        <property name="successUrl" value="/admin"/>
        <property name="unauthorizedUrl" value="/admin/error/unauthorized"/>
        <property name="securityManager" ref="securityManager"/>
        <property name="filterChainDefinitionMap" ref="filterChainDefinitionMap"/>
        <property name="filters">
            <map>
                <entry key="authc">
                    <bean class="com.icinfo.framework.security.shiro.filter.FormAuthenticationExtendFilter"/>
                </entry>
                <entry key="perms">
                    <bean class="com.icinfo.framework.security.shiro.filter.PermissionsAuthorizationExtendFilter"/>
                </entry>
            </map>
        </property>
    </bean>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="sessionManager" ref="defaultWebSessionManager"/>
        <property name="cacheManager" ref="shiroCacheManager"/>
        <property name="realm" ref="securityAuthorizingRealm"/>
    </bean>

    <!-- 自定义的Realm -->
    <bean id="securityAuthorizingRealm" class="com.icinfo.framework.security.shiro.SecurityAuthorizingRealm">
        <property name="shiroSecurityService" ref="sysLoginService"/>
        <property name="credentialsMatcher">
            <bean class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
                <property name="hashAlgorithmName" value="${spring.shiro.hash.algorithmName}"/>
                <property name="hashIterations" value="${spring.shiro.hash.iterations}"/>
            </bean>
        </property>
    </bean>

    <bean class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>

    <!-- Session Cookie ID 生成器 -->
    <bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator"/>
    <!-- Session Cookie -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <constructor-arg value="_hm_cid"/>
        <property name="httpOnly" value="true"/>
    </bean>

    <!-- 会话验证调度器 -->
    <bean id="sessionValidationScheduler" class="com.icinfo.framework.security.shiro.quartz.QuartzSessionValidationScheduler">
        <property name="sessionValidationInterval" value="1800000"/>
        <property name="sessionManager" ref="defaultWebSessionManager"/>
    </bean>

    <bean id="defaultWebSessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
        <property name="sessionDAO" ref="redisSessionDAO"/>
        <property name="globalSessionTimeout" value="1800000"/>
        <property name="deleteInvalidSessions" value="true"/>
        <property name="sessionValidationSchedulerEnabled" value="true"/>
        <property name="sessionValidationScheduler" ref="sessionValidationScheduler"/>
        <property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="sessionIdCookie"/>
    </bean>

    <bean id="redisSessionDAO" class="com.icinfo.framework.security.shiro.cache.DefaultRedisSessionDAO">
        <property name="cacheTemplate" ref="cacheTemplate"/>
        <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
        <property name="expire" value="1800"/>
    </bean>

    <bean id="cacheTemplate" class="com.icinfo.framework.cache.RedisCacheTemplate">
        <property name="redisTemplate" ref="shiroRedisTemplate"/>
    </bean>

    <!-- Shiro缓存管理 -->
    <bean id="shiroCacheManager" class="com.icinfo.framework.security.shiro.cache.RedisCacheManager">
        <property name="redisTemplate" ref="shiroRedisTemplate"/>
    </bean>

    <!-- Redis连接池配置 -->
    <bean id="shiroJedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${spring.redis.pool.maxIdle}"/>
        <property name="minIdle" value="${spring.redis.pool.minIdle}"/>
        <property name="testOnBorrow" value="${spring.redis.pool.testOnBorrow}"/>
        <property name="testWhileIdle" value="true"/>
    </bean>

    <!-- Redis连接工厂 -->
    <bean id="shiroJedisConnectionFactory"
          class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
          p:hostName="${spring.shiro.redis.single.host}" p:port="${spring.shiro.redis.single.port}"
          p:poolConfig-ref="shiroJedisPoolConfig"/>

    <!-- Redis操作模板 -->
    <bean id="shiroRedisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="shiroJedisConnectionFactory"/>
        <property name="keySerializer">
            <bean class="com.icinfo.framework.security.shiro.serializer.ShiroRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="com.icinfo.framework.security.shiro.serializer.ShiroRedisSerializer"/>
        </property>
    </bean>
</beans>